// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DroposalTypeApproved extends ethereum.Event {
  get params(): DroposalTypeApproved__Params {
    return new DroposalTypeApproved__Params(this);
  }
}

export class DroposalTypeApproved__Params {
  _event: DroposalTypeApproved;

  constructor(event: DroposalTypeApproved) {
    this._event = event;
  }

  get droposalTypeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DroposalTypeProposed extends ethereum.Event {
  get params(): DroposalTypeProposed__Params {
    return new DroposalTypeProposed__Params(this);
  }
}

export class DroposalTypeProposed__Params {
  _event: DroposalTypeProposed;

  constructor(event: DroposalTypeProposed) {
    this._event = event;
  }

  get droposalTypeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get config(): DroposalTypeProposedConfigStruct {
    return changetype<DroposalTypeProposedConfigStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class DroposalTypeProposedConfigStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get editionSize(): BigInt {
    return this[1].toBigInt();
  }

  get publicSalePrice(): BigInt {
    return this[2].toBigInt();
  }

  get publicSaleDuration(): BigInt {
    return this[3].toBigInt();
  }

  get fundsRecipientSplit(): BigInt {
    return this[4].toBigInt();
  }

  get minter(): Address {
    return this[5].toAddress();
  }
}

export class DroposalTypeSet extends ethereum.Event {
  get params(): DroposalTypeSet__Params {
    return new DroposalTypeSet__Params(this);
  }
}

export class DroposalTypeSet__Params {
  _event: DroposalTypeSet;

  constructor(event: DroposalTypeSet) {
    this._event = event;
  }

  get droposalTypeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get config(): DroposalTypeSetConfigStruct {
    return changetype<DroposalTypeSetConfigStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class DroposalTypeSetConfigStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get editionSize(): BigInt {
    return this[1].toBigInt();
  }

  get publicSalePrice(): BigInt {
    return this[2].toBigInt();
  }

  get publicSaleDuration(): BigInt {
    return this[3].toBigInt();
  }

  get fundsRecipientSplit(): BigInt {
    return this[4].toBigInt();
  }

  get minter(): Address {
    return this[5].toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalCanceled extends ethereum.Event {
  get params(): ProposalCanceled__Params {
    return new ProposalCanceled__Params(this);
  }
}

export class ProposalCanceled__Params {
  _event: ProposalCanceled;

  constructor(event: ProposalCanceled) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get targets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get signatures(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[5].value.toBytesArray();
  }

  get startBlock(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProposalThresholdSet extends ethereum.Event {
  get params(): ProposalThresholdSet__Params {
    return new ProposalThresholdSet__Params(this);
  }
}

export class ProposalThresholdSet__Params {
  _event: ProposalThresholdSet;

  constructor(event: ProposalThresholdSet) {
    this._event = event;
  }

  get oldProposalThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newProposalThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get support(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class VoteCastWithParams extends ethereum.Event {
  get params(): VoteCastWithParams__Params {
    return new VoteCastWithParams__Params(this);
  }
}

export class VoteCastWithParams__Params {
  _event: VoteCastWithParams;

  constructor(event: VoteCastWithParams) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get support(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }

  get params(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class VotingDelaySet extends ethereum.Event {
  get params(): VotingDelaySet__Params {
    return new VotingDelaySet__Params(this);
  }
}

export class VotingDelaySet__Params {
  _event: VotingDelaySet;

  constructor(event: VotingDelaySet) {
    this._event = event;
  }

  get oldVotingDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VotingPeriodSet extends ethereum.Event {
  get params(): VotingPeriodSet__Params {
    return new VotingPeriodSet__Params(this);
  }
}

export class VotingPeriodSet__Params {
  _event: VotingPeriodSet;

  constructor(event: VotingPeriodSet) {
    this._event = event;
  }

  get oldVotingPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NounsAgoraGovernorSepolia__droposalTypesResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getEditionSize(): BigInt {
    return this.value1;
  }

  getPublicSalePrice(): BigInt {
    return this.value2;
  }

  getPublicSaleDuration(): BigInt {
    return this.value3;
  }

  getFundsRecipientSplit(): BigInt {
    return this.value4;
  }

  getMinter(): Address {
    return this.value5;
  }
}

export class NounsAgoraGovernorSepolia__droposeInputDroposalParamsStruct extends ethereum.Tuple {
  get droposalType(): BigInt {
    return this[0].toBigInt();
  }

  get nftType(): i32 {
    return this[1].toI32();
  }

  get nftCollection(): Address {
    return this[2].toAddress();
  }

  get proposalDescription(): string {
    return this[3].toString();
  }

  get nftParams(): Bytes {
    return this[4].toBytes();
  }
}

export class NounsAgoraGovernorSepolia__pendingDroposalTypesResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getEditionSize(): BigInt {
    return this.value1;
  }

  getPublicSalePrice(): BigInt {
    return this.value2;
  }

  getPublicSaleDuration(): BigInt {
    return this.value3;
  }

  getFundsRecipientSplit(): BigInt {
    return this.value4;
  }

  getMinter(): Address {
    return this.value5;
  }
}

export class NounsAgoraGovernorSepolia__proposalVotesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAgainstVotes(): BigInt {
    return this.value0;
  }

  getForVotes(): BigInt {
    return this.value1;
  }

  getAbstainVotes(): BigInt {
    return this.value2;
  }
}

export class NounsAgoraGovernorSepolia__proposalsResultProposalStruct extends ethereum.Tuple {
  get voteStart(): NounsAgoraGovernorSepolia__proposalsResultProposalVoteStartStruct {
    return changetype<
      NounsAgoraGovernorSepolia__proposalsResultProposalVoteStartStruct
    >(this[0].toTuple());
  }

  get voteEnd(): NounsAgoraGovernorSepolia__proposalsResultProposalVoteEndStruct {
    return changetype<
      NounsAgoraGovernorSepolia__proposalsResultProposalVoteEndStruct
    >(this[1].toTuple());
  }

  get executed(): boolean {
    return this[2].toBoolean();
  }

  get canceled(): boolean {
    return this[3].toBoolean();
  }

  get proposer(): Address {
    return this[4].toAddress();
  }
}

export class NounsAgoraGovernorSepolia__proposalsResultProposalVoteStartStruct extends ethereum.Tuple {
  get _deadline(): BigInt {
    return this[0].toBigInt();
  }
}

export class NounsAgoraGovernorSepolia__proposalsResultProposalVoteEndStruct extends ethereum.Tuple {
  get _deadline(): BigInt {
    return this[0].toBigInt();
  }
}

export class NounsAgoraGovernorSepolia extends ethereum.SmartContract {
  static bind(address: Address): NounsAgoraGovernorSepolia {
    return new NounsAgoraGovernorSepolia("NounsAgoraGovernorSepolia", address);
  }

  BALLOT_TYPEHASH(): Bytes {
    let result = super.call(
      "BALLOT_TYPEHASH",
      "BALLOT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_BALLOT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BALLOT_TYPEHASH",
      "BALLOT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  COUNTING_MODE(): string {
    let result = super.call("COUNTING_MODE", "COUNTING_MODE():(string)", []);

    return result[0].toString();
  }

  try_COUNTING_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("COUNTING_MODE", "COUNTING_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  EXTENDED_BALLOT_TYPEHASH(): Bytes {
    let result = super.call(
      "EXTENDED_BALLOT_TYPEHASH",
      "EXTENDED_BALLOT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EXTENDED_BALLOT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EXTENDED_BALLOT_TYPEHASH",
      "EXTENDED_BALLOT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FIXED_PRICE_MINTER(): Address {
    let result = super.call(
      "FIXED_PRICE_MINTER",
      "FIXED_PRICE_MINTER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_FIXED_PRICE_MINTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "FIXED_PRICE_MINTER",
      "FIXED_PRICE_MINTER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  castVote(proposalId: BigInt, support: i32): BigInt {
    let result = super.call("castVote", "castVote(uint256,uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support))
    ]);

    return result[0].toBigInt();
  }

  try_castVote(proposalId: BigInt, support: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVote",
      "castVote(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteBySig(
    proposalId: BigInt,
    support: i32,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "castVoteBySig",
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteBySig(
    proposalId: BigInt,
    support: i32,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteBySig",
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReason(proposalId: BigInt, support: i32, reason: string): BigInt {
    let result = super.call(
      "castVoteWithReason",
      "castVoteWithReason(uint256,uint8,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReason(
    proposalId: BigInt,
    support: i32,
    reason: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReason",
      "castVoteWithReason(uint256,uint8,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReasonAndParams(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes
  ): BigInt {
    let result = super.call(
      "castVoteWithReasonAndParams",
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReasonAndParams(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReasonAndParams",
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReasonAndParamsBySig(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "castVoteWithReasonAndParamsBySig",
      "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReasonAndParamsBySig(
    proposalId: BigInt,
    support: i32,
    reason: string,
    params: Bytes,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReasonAndParamsBySig",
      "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(proposalId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(support)),
        ethereum.Value.fromString(reason),
        ethereum.Value.fromBytes(params),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentPendingDroposalCount(): BigInt {
    let result = super.call(
      "currentPendingDroposalCount",
      "currentPendingDroposalCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentPendingDroposalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentPendingDroposalCount",
      "currentPendingDroposalCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  droposalTypes(
    droposalTypeId: BigInt
  ): NounsAgoraGovernorSepolia__droposalTypesResult {
    let result = super.call(
      "droposalTypes",
      "droposalTypes(uint256):(string,uint64,uint96,uint64,uint32,address)",
      [ethereum.Value.fromUnsignedBigInt(droposalTypeId)]
    );

    return new NounsAgoraGovernorSepolia__droposalTypesResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_droposalTypes(
    droposalTypeId: BigInt
  ): ethereum.CallResult<NounsAgoraGovernorSepolia__droposalTypesResult> {
    let result = super.tryCall(
      "droposalTypes",
      "droposalTypes(uint256):(string,uint64,uint96,uint64,uint32,address)",
      [ethereum.Value.fromUnsignedBigInt(droposalTypeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NounsAgoraGovernorSepolia__droposalTypesResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  dropose(
    droposalParams: NounsAgoraGovernorSepolia__droposeInputDroposalParamsStruct
  ): BigInt {
    let result = super.call(
      "dropose",
      "dropose((uint256,uint8,address,string,bytes)):(uint256)",
      [ethereum.Value.fromTuple(droposalParams)]
    );

    return result[0].toBigInt();
  }

  try_dropose(
    droposalParams: NounsAgoraGovernorSepolia__droposeInputDroposalParamsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dropose",
      "dropose((uint256,uint8,address,string,bytes)):(uint256)",
      [ethereum.Value.fromTuple(droposalParams)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call("getVotes", "getVotes(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(blockNumber)
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(
    account: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotes",
      "getVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotesWithParams(
    account: Address,
    blockNumber: BigInt,
    params: Bytes
  ): BigInt {
    let result = super.call(
      "getVotesWithParams",
      "getVotesWithParams(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
        ethereum.Value.fromBytes(params)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVotesWithParams(
    account: Address,
    blockNumber: BigInt,
    params: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotesWithParams",
      "getVotesWithParams(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
        ethereum.Value.fromBytes(params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasVoted(proposalId: BigInt, account: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(
    proposalId: BigInt,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes
  ): BigInt {
    let result = super.call(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash)
      ]
    );

    return result[0].toBigInt();
  }

  try_hashProposal(
    targets: Array<Address>,
    values: Array<BigInt>,
    calldatas: Array<Bytes>,
    descriptionHash: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(targets),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromFixedBytes(descriptionHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nounsGovernor(): Address {
    let result = super.call("nounsGovernor", "nounsGovernor():(address)", []);

    return result[0].toAddress();
  }

  try_nounsGovernor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nounsGovernor",
      "nounsGovernor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nounsReceiver(): Address {
    let result = super.call("nounsReceiver", "nounsReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_nounsReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nounsReceiver",
      "nounsReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nounsToken(): Address {
    let result = super.call("nounsToken", "nounsToken():(address)", []);

    return result[0].toAddress();
  }

  try_nounsToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("nounsToken", "nounsToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingDroposalTypes(
    pendingDroposalTypeId: BigInt
  ): NounsAgoraGovernorSepolia__pendingDroposalTypesResult {
    let result = super.call(
      "pendingDroposalTypes",
      "pendingDroposalTypes(uint256):(string,uint64,uint96,uint64,uint32,address)",
      [ethereum.Value.fromUnsignedBigInt(pendingDroposalTypeId)]
    );

    return new NounsAgoraGovernorSepolia__pendingDroposalTypesResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_pendingDroposalTypes(
    pendingDroposalTypeId: BigInt
  ): ethereum.CallResult<
    NounsAgoraGovernorSepolia__pendingDroposalTypesResult
  > {
    let result = super.tryCall(
      "pendingDroposalTypes",
      "pendingDroposalTypes(uint256):(string,uint64,uint96,uint64,uint32,address)",
      [ethereum.Value.fromUnsignedBigInt(pendingDroposalTypeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NounsAgoraGovernorSepolia__pendingDroposalTypesResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  proposalDeadline(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalDeadline",
      "proposalDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalDeadline(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDeadline",
      "proposalDeadline(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalSnapshot(proposalId: BigInt): BigInt {
    let result = super.call(
      "proposalSnapshot",
      "proposalSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalSnapshot(proposalId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalSnapshot",
      "proposalSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalThreshold(): BigInt {
    let result = super.call(
      "proposalThreshold",
      "proposalThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalThreshold",
      "proposalThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalVotes(
    proposalId: BigInt
  ): NounsAgoraGovernorSepolia__proposalVotesResult {
    let result = super.call(
      "proposalVotes",
      "proposalVotes(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return new NounsAgoraGovernorSepolia__proposalVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_proposalVotes(
    proposalId: BigInt
  ): ethereum.CallResult<NounsAgoraGovernorSepolia__proposalVotesResult> {
    let result = super.tryCall(
      "proposalVotes",
      "proposalVotes(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NounsAgoraGovernorSepolia__proposalVotesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  proposals(
    proposalId: BigInt
  ): NounsAgoraGovernorSepolia__proposalsResultProposalStruct {
    let result = super.call(
      "proposals",
      "proposals(uint256):(((uint64),(uint64),bool,bool,address))",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return changetype<NounsAgoraGovernorSepolia__proposalsResultProposalStruct>(
      result[0].toTuple()
    );
  }

  try_proposals(
    proposalId: BigInt
  ): ethereum.CallResult<
    NounsAgoraGovernorSepolia__proposalsResultProposalStruct
  > {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(((uint64),(uint64),bool,bool,address))",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NounsAgoraGovernorSepolia__proposalsResultProposalStruct>(
        value[0].toTuple()
      )
    );
  }

  propose(
    param0: Array<Address>,
    param1: Array<BigInt>,
    param2: Array<Bytes>,
    param3: string
  ): BigInt {
    let result = super.call(
      "propose",
      "propose(address[],uint256[],bytes[],string):(uint256)",
      [
        ethereum.Value.fromAddressArray(param0),
        ethereum.Value.fromUnsignedBigIntArray(param1),
        ethereum.Value.fromBytesArray(param2),
        ethereum.Value.fromString(param3)
      ]
    );

    return result[0].toBigInt();
  }

  try_propose(
    param0: Array<Address>,
    param1: Array<BigInt>,
    param2: Array<Bytes>,
    param3: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "propose",
      "propose(address[],uint256[],bytes[],string):(uint256)",
      [
        ethereum.Value.fromAddressArray(param0),
        ethereum.Value.fromUnsignedBigIntArray(param1),
        ethereum.Value.fromBytesArray(param2),
        ethereum.Value.fromString(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  quorum(blockNumber: BigInt): BigInt {
    let result = super.call("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber)
    ]);

    return result[0].toBigInt();
  }

  try_quorum(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quorum", "quorum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(blockNumber)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slice(): Address {
    let result = super.call("slice", "slice():(address)", []);

    return result[0].toAddress();
  }

  try_slice(): ethereum.CallResult<Address> {
    let result = super.tryCall("slice", "slice():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  splitMain(): Address {
    let result = super.call("splitMain", "splitMain():(address)", []);

    return result[0].toAddress();
  }

  try_splitMain(): ethereum.CallResult<Address> {
    let result = super.tryCall("splitMain", "splitMain():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  state(proposalId: BigInt): i32 {
    let result = super.call("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toI32();
  }

  try_state(proposalId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  votingDelay(): BigInt {
    let result = super.call("votingDelay", "votingDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingDelay", "votingDelay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  zoraCreator1155Factory(): Address {
    let result = super.call(
      "zoraCreator1155Factory",
      "zoraCreator1155Factory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_zoraCreator1155Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "zoraCreator1155Factory",
      "zoraCreator1155Factory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zoraNFTCreator721(): Address {
    let result = super.call(
      "zoraNFTCreator721",
      "zoraNFTCreator721():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_zoraNFTCreator721(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "zoraNFTCreator721",
      "zoraNFTCreator721():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveDroposalTypeCall extends ethereum.Call {
  get inputs(): ApproveDroposalTypeCall__Inputs {
    return new ApproveDroposalTypeCall__Inputs(this);
  }

  get outputs(): ApproveDroposalTypeCall__Outputs {
    return new ApproveDroposalTypeCall__Outputs(this);
  }
}

export class ApproveDroposalTypeCall__Inputs {
  _call: ApproveDroposalTypeCall;

  constructor(call: ApproveDroposalTypeCall) {
    this._call = call;
  }

  get droposalTypeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pendingDroposalTypeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveDroposalTypeCall__Outputs {
  _call: ApproveDroposalTypeCall;

  constructor(call: ApproveDroposalTypeCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteBySigCall extends ethereum.Call {
  get inputs(): CastVoteBySigCall__Inputs {
    return new CastVoteBySigCall__Inputs(this);
  }

  get outputs(): CastVoteBySigCall__Outputs {
    return new CastVoteBySigCall__Outputs(this);
  }
}

export class CastVoteBySigCall__Inputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CastVoteBySigCall__Outputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonCall__Inputs {
    return new CastVoteWithReasonCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonCall__Outputs {
    return new CastVoteWithReasonCall__Outputs(this);
  }
}

export class CastVoteWithReasonCall__Inputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CastVoteWithReasonCall__Outputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonAndParamsCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonAndParamsCall__Inputs {
    return new CastVoteWithReasonAndParamsCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonAndParamsCall__Outputs {
    return new CastVoteWithReasonAndParamsCall__Outputs(this);
  }
}

export class CastVoteWithReasonAndParamsCall__Inputs {
  _call: CastVoteWithReasonAndParamsCall;

  constructor(call: CastVoteWithReasonAndParamsCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }

  get params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CastVoteWithReasonAndParamsCall__Outputs {
  _call: CastVoteWithReasonAndParamsCall;

  constructor(call: CastVoteWithReasonAndParamsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonAndParamsBySigCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonAndParamsBySigCall__Inputs {
    return new CastVoteWithReasonAndParamsBySigCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonAndParamsBySigCall__Outputs {
    return new CastVoteWithReasonAndParamsBySigCall__Outputs(this);
  }
}

export class CastVoteWithReasonAndParamsBySigCall__Inputs {
  _call: CastVoteWithReasonAndParamsBySigCall;

  constructor(call: CastVoteWithReasonAndParamsBySigCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get support(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }

  get params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class CastVoteWithReasonAndParamsBySigCall__Outputs {
  _call: CastVoteWithReasonAndParamsBySigCall;

  constructor(call: CastVoteWithReasonAndParamsBySigCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DroposeCall extends ethereum.Call {
  get inputs(): DroposeCall__Inputs {
    return new DroposeCall__Inputs(this);
  }

  get outputs(): DroposeCall__Outputs {
    return new DroposeCall__Outputs(this);
  }
}

export class DroposeCall__Inputs {
  _call: DroposeCall;

  constructor(call: DroposeCall) {
    this._call = call;
  }

  get droposalParams(): DroposeCallDroposalParamsStruct {
    return changetype<DroposeCallDroposalParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DroposeCall__Outputs {
  _call: DroposeCall;

  constructor(call: DroposeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DroposeCallDroposalParamsStruct extends ethereum.Tuple {
  get droposalType(): BigInt {
    return this[0].toBigInt();
  }

  get nftType(): i32 {
    return this[1].toI32();
  }

  get nftCollection(): Address {
    return this[2].toAddress();
  }

  get proposalDescription(): string {
    return this[3].toString();
  }

  get nftParams(): Bytes {
    return this[4].toBytes();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get descriptionHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ProposeDroposalTypeCall extends ethereum.Call {
  get inputs(): ProposeDroposalTypeCall__Inputs {
    return new ProposeDroposalTypeCall__Inputs(this);
  }

  get outputs(): ProposeDroposalTypeCall__Outputs {
    return new ProposeDroposalTypeCall__Outputs(this);
  }
}

export class ProposeDroposalTypeCall__Inputs {
  _call: ProposeDroposalTypeCall;

  constructor(call: ProposeDroposalTypeCall) {
    this._call = call;
  }

  get config(): ProposeDroposalTypeCallConfigStruct {
    return changetype<ProposeDroposalTypeCallConfigStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ProposeDroposalTypeCall__Outputs {
  _call: ProposeDroposalTypeCall;

  constructor(call: ProposeDroposalTypeCall) {
    this._call = call;
  }
}

export class ProposeDroposalTypeCallConfigStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get editionSize(): BigInt {
    return this[1].toBigInt();
  }

  get publicSalePrice(): BigInt {
    return this[2].toBigInt();
  }

  get publicSaleDuration(): BigInt {
    return this[3].toBigInt();
  }

  get fundsRecipientSplit(): BigInt {
    return this[4].toBigInt();
  }

  get minter(): Address {
    return this[5].toAddress();
  }
}

export class RelayCall extends ethereum.Call {
  get inputs(): RelayCall__Inputs {
    return new RelayCall__Inputs(this);
  }

  get outputs(): RelayCall__Outputs {
    return new RelayCall__Outputs(this);
  }
}

export class RelayCall__Inputs {
  _call: RelayCall;

  constructor(call: RelayCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RelayCall__Outputs {
  _call: RelayCall;

  constructor(call: RelayCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDroposalTypeCall extends ethereum.Call {
  get inputs(): SetDroposalTypeCall__Inputs {
    return new SetDroposalTypeCall__Inputs(this);
  }

  get outputs(): SetDroposalTypeCall__Outputs {
    return new SetDroposalTypeCall__Outputs(this);
  }
}

export class SetDroposalTypeCall__Inputs {
  _call: SetDroposalTypeCall;

  constructor(call: SetDroposalTypeCall) {
    this._call = call;
  }

  get droposalTypeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get config(): SetDroposalTypeCallConfigStruct {
    return changetype<SetDroposalTypeCallConfigStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetDroposalTypeCall__Outputs {
  _call: SetDroposalTypeCall;

  constructor(call: SetDroposalTypeCall) {
    this._call = call;
  }
}

export class SetDroposalTypeCallConfigStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get editionSize(): BigInt {
    return this[1].toBigInt();
  }

  get publicSalePrice(): BigInt {
    return this[2].toBigInt();
  }

  get publicSaleDuration(): BigInt {
    return this[3].toBigInt();
  }

  get fundsRecipientSplit(): BigInt {
    return this[4].toBigInt();
  }

  get minter(): Address {
    return this[5].toAddress();
  }
}

export class SetProposalThresholdCall extends ethereum.Call {
  get inputs(): SetProposalThresholdCall__Inputs {
    return new SetProposalThresholdCall__Inputs(this);
  }

  get outputs(): SetProposalThresholdCall__Outputs {
    return new SetProposalThresholdCall__Outputs(this);
  }
}

export class SetProposalThresholdCall__Inputs {
  _call: SetProposalThresholdCall;

  constructor(call: SetProposalThresholdCall) {
    this._call = call;
  }

  get newProposalThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProposalThresholdCall__Outputs {
  _call: SetProposalThresholdCall;

  constructor(call: SetProposalThresholdCall) {
    this._call = call;
  }
}

export class SetVotingDelayCall extends ethereum.Call {
  get inputs(): SetVotingDelayCall__Inputs {
    return new SetVotingDelayCall__Inputs(this);
  }

  get outputs(): SetVotingDelayCall__Outputs {
    return new SetVotingDelayCall__Outputs(this);
  }
}

export class SetVotingDelayCall__Inputs {
  _call: SetVotingDelayCall;

  constructor(call: SetVotingDelayCall) {
    this._call = call;
  }

  get newVotingDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingDelayCall__Outputs {
  _call: SetVotingDelayCall;

  constructor(call: SetVotingDelayCall) {
    this._call = call;
  }
}

export class SetVotingPeriodCall extends ethereum.Call {
  get inputs(): SetVotingPeriodCall__Inputs {
    return new SetVotingPeriodCall__Inputs(this);
  }

  get outputs(): SetVotingPeriodCall__Outputs {
    return new SetVotingPeriodCall__Outputs(this);
  }
}

export class SetVotingPeriodCall__Inputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }

  get newVotingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingPeriodCall__Outputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
